###------Describe table------###

		desc <table name>

		It will return column name, type of data, etc.


###------Set default value when creating new table------###
		
		===
		create table students
		(
		`name` varchar(100),
		`age` int default 20
		);
		
		
		
		insert into students (`name`) values('alex');
		select * from students
		===


		In this case, I set the default of age to be 20.



###------Return unique value of a column------###
		select distinct <column name> from <table name>

		select distinct room_type from room_info


===================================
###------Table action------###
===================================
##------Modify data type of a columns------##
		alter table <table name>
		modify <column name> <data type>

##------Rename a column------##
		alter table <table name>
		rename column <old_name> to <new_name>


##------Add a column------##
		alter table students
		add column <column name> <data type>;	

##------Drop a column------##
		alter table students
		drop column <column name>



##------Set primary key when creating a table------##
		create table student(
		`CUID` int,
		`name` varchar(100),
		`age` int,
		primary key (`CUID`)
		);


##------Drop an existed primary key------##
		alter table student
		drop primary key;


##------Add primary key and foreign key to an existed table------##
		alter table room_info
		add primary key(id);

		alter table room_info
		add foreign key(host_id) references room_host(host_id);





===================================
###------Merge table------###
===================================
##------Inner join------##
		Show intersection between two tables.

		select <columns from different tables>
		from <table 1>
		inner join <table 2> on <table1.host_id> = <table2.host_id>


		Example:

		Suppose I want to include the host_id, from room_host,

		'''
		select `name` as 'item name',
		room_type, price, room_host.host_id
		from room_info
		inner join room_host on room_info.host_id = room_host.host_id
		'''



##------Right join------##
		Two tables: room_info, a.
				room_info: 	inclues name of item, prices, ...
				a: 					host_id, host_name, num_of_listings
		Note, only for those who have more than 100 listed items are included in table <a>.


		Target: Show name and price for each item posted by host in table a (Those who have more than 100 listed items).

		Logic: 
				1. need to extract a from room_host.
				2. info in room_info that will be extracted rely on host in table a. In another word, this can be a <right join>.


		Code:
				-- construct table a
				with a as
					(
				    select * from room_host
					where calculated_host_listings_count > 100
				    )
				
				-- right join room_info on table a
				select `name`, a.host_name
				from room_info
				right join a on room_info.host_id = a.host_id




		Appendix:
		Table a

				host_id,	host_name,	calculated_host_listings_count
				30283594,		Kara,									121
				107434423,	Blueground,						232
				137358866,	Kazuya,								103
				219517861,	"Sonder (NYC)",				327




##------Left join------##
		Two tables:
				expensive_room: room with price above 200. col: item name,price,host_id,...
				room_host:			contain all host info. col: host_id, host_name...

		Target:
				show item_name, price, host_name.

		Logic:
				1. Extract table:expensive_room from table:room_info
				2. Merge needed columns from expensive_room and host_name

		Code:

		with expensive_room as
		(
		select `name` as 'item name', price, host_id
		from room_info
		where price > 200)
		
		select `item name`, price, room_host.host_name 
		from expensive_room
		left join room_host on expensive_room.host_id = room_host.host_id

		Note: 以信息少的为准进行join.












##------Union------##
		The UNION operator is used to combine the [[[result-set]]] of two or more SELECT statements.

		The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL

		Example:
		I want to show host_id of either the room price is above 100 or
		the num of listing items is above 5

		'''
		select host_id from room_info
		where price > 100
		union
		select host_id from room_host
		where calculated_host_listings_count > 5
		'''










##------Insert into select------##

		Method 1:

		Insert into <table2>
		select * from <table1>
		where condition.


		Method 2:

		Insert into table2 (col1, col2, ...)
		select col1, col2, ...
		from <table1>
		where condition

		This will insert qualified <table1> into <table2>

		Note, data types in <table1> and <table2> should be the same.



===================================
###------Search action------###
===================================
##------Only show the first n rows------##
		Same as df.head(n)

		'''
		select * from room_info
		limit 5
		'''

		This will only return the first 5

##------Min()------##
		select min(<column name>) from <table name>




##------Max()------##
		select max(<column name>) from <table name>


##------Like (blury search)------##
		select * from room_info
		where room_type like <condition>

		LIKE 'a%'	Finds any values that start with "a"
		LIKE '%a'	Finds any values that end with "a"
		LIKE '%or%'	Finds any values that have "or" in any position
		LIKE '_r%'	Finds any values that have "r" in the second position
		LIKE 'a_%'	Finds any values that start with "a" and are at least 2 characters in length
		LIKE 'a__%'	Finds any values that start with "a" and are at least 3 characters in length
		LIKE 'a%o'	Finds any values that start with "a" and ends with "o"


##------In------##
		Similar to python. Very Useful!!!

		select * from room_info
		where price in (100, 40)


		price can be either 100 or 40.


		=========begin========= 
		Advanced operation: 
				Show information in table <room_info> for those hosts who
				has more than 3 listing items

				'''
				select `name`, room_type, price, host_id from room_info
				where host_id in (
					select host_id from room_host
					where calculated_host_listings_count > 3
					)
				'''
		=========end========= 
		
		
		
		
##------Not in------##
		where price not in (100, 40)




##------Between ... and------##

		Select * from room_info
		where price between 10 and 40


		Another example:
		Select * from tx_info
		where block_time between '2020-01-04' and '2022-01-04'


##------Not between ... and ------##


##------Alias------##
		Give column a name when showing result

		Select `name` as 'room name' from room_info




##------Having------##
		Similar to <where>, while <where> does not work for aggregate function, e.g., <count()>

		select count(id) as 'num of listing', host_id
		from room_info
		group by host_id
		having count(id) > 2
		



##------Any------##
		select <columns> from <table>
		where <column> <operator> any
		(select <column> from <table> where <condition>)


		Example: 
				I want to show room with price greater than (new query)

				select `name`, price, id
				from room_info
				where price > any 
				(
				select price*10 as new_price from room_info
				)

##------All------##
		Same syntax as Any.






##------Case------##
		This the if...else in python. It will add a new column

		UseCase 1:

				select col1, col2, 
				case
						when <condition1> then <result1>
						when <condition2> then <result2>
						...
						else <result n>
						end as <new column>
				from <table>


						with cheap_room as (
							select `name`, price, room_type from room_info
						    where price < 100
						)
						
						select 
						*,
						case
							when price >= 80 then 'price is between 80 and 100'
						    when price >= 50 and price < 80 then 'price is between 50 and 80'
						    else 'price is below 50'
						end as price_description
						from cheap_room




		UseCase 2:
				select name, city, country
				from customers
				order by
						(
						case 
								when city is null then country
								else city
						end
						);



##------ifnull------##
		Solve for null value by assign it to another value.
		Example
				ifnull(referee_id, 0)

		This will assign a zero to referee_id if it is null.

		Practice Example:


		========Begin========
		Customer table:
		+----+------+------------+
		| id | name | referee_id |
		+----+------+------------+
		| 1  | Will | null       |
		| 2  | Jane | null       |
		| 3  | Alex | 2          |
		| 4  | Bill | null       |
		| 5  | Zack | 1          |
		| 6  | Mark | 2          |
		+----+------+------------+
		
		
		id is the primary key column for this table.
		Each row of this table indicates the id of a customer, their name, and the id of the customer who referred them.
		
		
		Write an SQL query to report the names of the customer that are not referred by the customer with id = 2.
		
		Return the result table in any order.
		
		Code:
				select
				    name
				from
				    Customer
				where
				    ifnull(referee_id, 0) != 2

		========End========




================================
###------Logic Function------###
================================

##------IF------##
		if(condition, value_if_true, value_if_false)

		This can swap values for a dummy variable.
		Example
				Salary 
				+----+------+-----+--------+
				| id | name | sex | salary |
				+----+------+-----+--------+
				| 1  | A    | m   | 2500   |
				| 2  | B    | f   | 1500   |
				| 3  | C    | m   | 5500   |
				| 4  | D    | f   | 500    |
				+----+------+-----+--------+
				
				
		If I want to swap gender, i.e., swap m and f for each person,
		I can use this

		Code:
				Update Salary set sex = if(sex = 'f', 'm', 'f')


		Or I can use replace function to swap value:
		
		Code:
				UPDATE salary SET sex = REPLACE ('fm', sex, '')














